module Task4 (fib2) where

-- Infinite Fibonacci list using zipWith
fibs :: [Integer]
fibs = 0 : 1 : zipWith (+) fibs (drop 1 fibs) --
  -- The first two elements are 0 and 1, and the rest are generated by adding
  -- the previous two elements together using zipWith.
  -- drop 1 fibs skips the first element (0) to ensure we are adding the last two

-- Returns the n-th Fibonacci number
fib2 :: Int -> Integer
fib2 n = fibs !! n




-- 
-- >>> fib2 0
-- 0
--
-- >>> fib2 1
-- 1
--
-- >>> fib2 2
-- 1
--
-- >>> fib2 5
-- 5
--
-- >>> fib2 10
-- 55
--
-- >>> fib2 15
-- 610



-- fibs = 0 : 1 : next fibs
--   where
--     next (a : t@(b:_)) = (a+b) : next t


-- Q: What is (b:_) for? = Itâ€™s pattern matching to grab the second element (b) of the list.
-- Q: What does t@ do? = t@ gives a name to the whole list starting at b, so we can pass it to next again in the recursion.